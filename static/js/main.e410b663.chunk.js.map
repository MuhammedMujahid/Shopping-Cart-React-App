{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","_ref","totalCounters","react_default","a","createElement","className","href","Counter","_this","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","delete","id","classes","value","Component","Counters","_this$props","onReset","counters","onDelete","map","components_counter","key","App","state","handleDelete","counterId","filter","c","setState","handleReset","handleIncrement","Object","toConsumableArray","index","indexOf","objectSpread","console","log","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e410b663.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nconst NavBar = ({ totalCounters }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        NavBar{\" \"}\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\n// class NavBar extends Component {\r\n//   render() {\r\n//   }\r\n// }\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  //   state = {\r\n  //     value: this.props.counter.value,\r\n  //     tags: [\"tag1\", \"tag2\", \"tag3\"]\r\n  //   };\r\n\r\n  //   constructor(){\r\n  //       super();\r\n  //       this.handleIncrement = this.handleIncrement.bind(this); //since \"this\" keyword is defined here, you can perma bind it to use in a function\r\n\r\n  //   styles = {\r\n  //     fontSize: 50,\r\n  //     fontWeight: \"bold\"\r\n  //   };\r\n  //   renderTags() {\r\n  //     if (this.state.tags.length === 0) {\r\n  //       return <p>GG NO RE, ARRAY IS EMPTY</p>;\r\n  //     }\r\n\r\n  //     // return (\r\n  //     //   <ul>\r\n  //     //     {this.state.tags.map(tag => (\r\n  //     //       <li key={tag}>{tag}</li> // dynamically renders list by using map function, added key to uniquely identify elements.\r\n  //     //       // only necessary to uniquely identify within a list\r\n  //     //     ))}\r\n  //     //   </ul>\r\n  //     // );\r\n  //   }\r\n\r\n  //   handleIncrement = product => {\r\n  //     // arrow function, so that \"this\" is not redefined\r\n  //     // console.log(\"WOW MUCH INCREMENT\", this);\r\n  //     console.log(product);\r\n  //     this.setState({ value: this.state.value + 1 });\r\n  //   };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)} //NOTE: passed reference instead of call for onClick -- PASSES ARGUMENT\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.delete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n\r\n        {/* {this.renderTags()} */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //helper methods\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"zero\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\nclass Counters extends Component {\r\n  render() {\r\n    const { onReset, counters, onDelete, onIncrement } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm\">\r\n          Reset\r\n        </button>\r\n        {counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            counter={counter}\r\n            delete={onDelete}\r\n            onIncrement={onIncrement}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n  handleReset = () => {\n    const counters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    console.log(this.state.counters[index]);\n    this.setState({ counters });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onDelete={this.handleDelete}\n            onIncrement={this.handleIncrement}\n            onReset={this.handleReset}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}